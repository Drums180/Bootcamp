
<script src="script.js"></script>
--> habilita el uso de un archivo externo de javascript

console.log("Your external JavaScript file is linked ðŸŽ‰");
--> al abrir la consola de inspecciÃ³n te permite dar un mensaje al usuario ("x" es lo que se mostrarÃ¡ en el mensaje)

var studentName;
--> Declares student variable using var keyword 
--> Variable sin valor asignado es de tipo (Undefined)

var studentName = "Abdul";
var studentAge = 32;
--> Uses assignment operator(=) to assign a value

studentName = "Tonya";
studentAge = 52;
--> To re-assign a variable, use only the variable's name  

console.log(studentName);
--> To access a value stored in a variable, use the variable's name

console.log("My name is ");
--> To combine the message with a variable value use the concatenation operator(+)
--> Logs "My name is "

console.log("My name is " + studentName);
--> Logs "My name is Tonya"

var myUndefined;
--> Primitive data types include undefined, string, number and boolean
--> Undefined variables haven't been assigned values yet.

var myStringWelcome = "Hello World"; 
var myStringPassword = "865Password!2020";
--> A string is a series of characters and is surrounded by quotes 

var myNumberInt = 100;
var myNumberDecimal = 100.100;
--> A number can be either an integer or a decimal  

typeof
--> te dice el tipo de variable o elemento:
str = text (texts "hello")
num = number (any number)
bol = boolean (only have 2 values = true / false)

console.log(typeof myNumberInt); 
--> Logs number

console.log(typeof true);
--> Logs boolean

console.log(typeof "Howdy");
--> Logs string

------------------------------------------------------------
>>EQUATIONS<<

var a = 100;
var b = 10;
var c = "10.0";
console.log(a + b);
console.log(a - b);
console.log(a / b);
console.log(a * b);
--> Arithmetic operators combine with numbers to form an expression that returns a single number
 
console.log(a % b);
--> Modulus returns the remainder between two numbers. 
--> Modulus = %

console.log(b == c); // True
console.log(b != c); // False
--> Comparison operators combine with strings, booleans and numbers to form an expression that evaluates to true or false
--> Compares equality
--> Compares the value, not type

console.log(b === c); // False cause are different type
console.log(b !== c); // 
--> Compares equality and type (strict equality)

console.log(a > b);
console.log(a < b);
--> Greater than or less than

console.log(a <= b);
console.log(a >= b);
--> Greater than or equal to and less than or equal to
--> Transforma str en num

var expression1 = (b == c);
var expression2 = (a > b);
--> Logical operators take in two or more expressions and return true or false 

console.log(expression1 && expression2);
--> Evaluates to true if expression1 AND expression2 are both true, otherwise false


console.log(expression1 || expression2);
--> Evaluates to true if expression1 OR expression2 is true, otherwise false

console.log(expression2);
--> Logical Not (!) turns an expression that evaluates to true to false and vice versa
--> Returns true

console.log(!expression2);
--> Returns false

----------------------------------------
>>CONDICIONAL<<

var hungerLevel = 50;
var isLunchTime = true;
var lunchBill = 11;


if (hungerLevel >= 50) {
  console.log("Hungry!");
} //true
--> If statement
--> Evaluates to true so "Hungry" is logged

if (hungerLevel < 50) {
  console.log("Hungry!");
} //false
--> Evaluates to false so nothing is logged

if (isLunchTime === true) {
  console.log("Lunchtime");
} else {
  console.log("Not Lunchtime");
}
--> Else statement 
--> Evaluates to true so "Lunchtime" is logged

if (isLunchTime) {
  console.log("Lunchtime!!");
} else {
  console.log("Not Lunchtime!!");
}
--> isLunchTime is another way of writing "isLunchTime === true"

if (!isLunchTime) {
  console.log("Not Lunchtime Already!!");
} else {
  console.log("It's Lunchtime Already !!");
}
--> Evaluates to false so "It's Lunchtime Already" is logged

if (lunchBill < 10) {
  console.log("Cost Rating: $");
} else if (lunchBill >= 10 && lunchBill < 15) {
  console.log("Cost Rating: $$");
} else {
  console.log("Cost Rating: $$$");
}
--> Else if allows you to test more than one condition
--> The first condition is false, so the second condition is evaluated. Logs "Cost Rating: $$""
--> Puedes aÃ±adir tantos else if como quieras
--> Se pueden aÃ±adir distintas acciones a ejecutar para cada if mientras estÃ©n dentro de las {}

---------------------------------
>>>ARRAY<<<
var name = "Andre";
var pets = 3; 
var isStudent = true;
--> So far, we have been storing one piece of data in variables

var names = ["Andre", "Karl", "Rashida", "Olivia"];
--> To store groups of data in a single variable, we use arrays
--> Arrays empiezan desde 0

console.log(names);
--> The entire array can be accessed by using the array's name 

console.log(names[1]); 
--> To log a single element, we use the name of the array with the index in brackets

console.log(names[0]); 
--> Arrays are zero-indexed, so the index of first element in the array is 0

console.log(names[3]);
--> We can also use index to replace data in an array
--> Returns "Olivia"

names[3] = "Carter"; 
--> Replaces "Olivia" with "Carter"

console.log(names[3]);
--> Logs "Carter"

console.log(names.length);
--> We use the array's length property to determine how many elements are in the array
----------------------------------------
>>>ITERATIONS<<<
for (var i = 0; i < 5; i++) {
--> We use a for-loop to execute code more than once
--> This is the block of code that will run each time
    console.log("This is the current value of i: " + i + ".");
}

var zooAnimals = ["Bears", "Giraffes", "Penguins", "Meerkats"];
--> or-loops are often used to iterate over arrays

for (var i = 0; i < zooAnimals.length; i++) { 
    console.log("I am going to zoo to see " + zooAnimals[i] + ".");
}
--> To determine how many times the loop should execute, we use the array's length
-----------------------------------------------
>>>FUNCTION<<<
function declareHello() { 
  console.log("Hello, I am a function declaration.");
  console.log("-----------------------------------");
  // Return stops the execution of a function
  return;
}
--> Functions are reusable blocks of code that perform a specific task
--> This is a function declaration 


var expressHello = function() { 
  console.log("Hello, I am a function expression.");
  console.log("-----------------------------------");
  return;
};
--> This is a function expression

declareHello(); 
expressHello();
--> Functions must be called to execute

declareHello(); 
--> Functions can be called again to make the block of code execute again

function declareHelloAgain(x,y,z) { 
  console.log("Hello, my parameter's values are " + x + ", " + y + ", and " + z);
  console.log("-----------------------------------");
  return;
}
--> Functions can take parameters.
--> Parameters give a name to the data to be passed into the function

declareHelloAgain(7, "Hello", true);
--> Function arguments give parameters their values
--> Here the parameter x is given the value 7 when the function is called

var hello = "Hello"; 
-_> A variable declared in global scope is available to all functions

function sayHello() {
  console.log(hello);
  return;
}

var sayHelloAgain = function () {
  console.log(hello);
  return;
};

sayHello();
sayHelloAgain();

function sayGoodbye() { 
  var goodbye = "Goodbye";
  console.log(goodbye);
  return;
}
--> A variable declared in local scope is only available to that function

var sayGoodbyeAgain = function () { 
  console.log(goodbye);
  return;
};
--> This will throw an error

var shadow = "Hello";
 console.log(shadow);
--> Shadowing happens when the same variable is used in the local and global scope

function sayWhat() {
  console.log(shadow);
  return;
}
--> Logs "Hello"

var sayWhatAgain = function () {
  var shadow = "Goodbye";
  console.log(shadow);   
};
--> Logs "Goodbye"

sayGoodbye();
sayWhat();
sayWhatAgain();

------------------------------------------
>>>SORT<<<
var comparisonOperators = ["Equal", "Not Equal", "Strict Equal", "Strict Not Equal", "Greater Than", "Less Than"];
var arithmaticOperators = ["+", "-", "%"];
var logicalOperators = ["and", "or", "not"];
var myString = "Hello String";

comparisonOperators.sort(); 
--> Array Methods
--> Sorts comparisonOperators array and returns the sorted array

console.log(comparisonOperators);
--> Logs sorted array

arithmaticOperators.push("%");
--> Adds elements to end of an array. Takes in at least one parameter

console.log(arithmaticOperators);
--> Logs array with element "%" added to end

var logicalOperatorsSliced = logicalOperators.slice(0,2);
--> Returns selected elements as a new array.

console.log(logicalOperatorsSliced);
--> Logs new array

console.log(logicalOperators);
--> The orginal array is unchanged

var myNewString = myString.replace("String", "World");
console.log(myNewString);
--> String Methods
--> Replaces "String" with "World" and returns new string

console.log(myString);
--> The orginal string is unchanged
------------------------------------------
>>>MODIFY ARRAYS<<<

var constellations = ["Orion", "Scorpius", "Lyra", "Ursa Major", "Ursa Minor"];
var planets = ["Earth", "Saturn", "Mars", "Jupiter", "Uranus", "Venus"];
var star = "polaris";

constellations.unshift("Canis Major");
console.log(constellations);
--> Inserts new elements at the start of an array, and returns the new length of the array.

planets.pop();
console.log(planets)
--> Removes the last element from an array and returns it. If the array is empty, undefined is returned and the array is not modified.

var galaxy = constellations.concat(planets);
console.log(galaxy)
--> Combines two or more arrays. This method returns a new array without modifying any existing arrays.

var uuperCaseStar = star.toUpperCase()
console.log(uuperCaseStar)
--> Converts all the alphabetic characters in a string to uppercase.


------------------------------------------
>>>OBJETCTS<<<

// Objects are a collection of properties
var planet = { 
  // Properties are made up of key-value pairs
  name: "Earth",
  age: "4.543 billion years",
  moons: 1,
  isPopulated: true,
  population: "7.594 billion"
};

// To access a property's value that is a string, number or booleean, use the object's name and the associated key	
// Uses dot notation and logs "Earth"	
console.log(planet.name);
	
// Uses bracket notation and logs "Earth"
console.log(planet["population"]);

// Objects can store more than primitive data types like strings, booleans and numbers
var planet = {
  name: "Earth",
  age: "4.543 billion years",
  moons: 1,
  isPopulated: true,
  population: "7.594 billion",
  // Objects can store arrays in a key-value pair
  neighboringPlanets: ["Mars", "Venus"],
  // Objects can also store methods
  tellFunFact: function (myparam) {
    console.log("The earth is the only planet in our solar system not named after a Roman god or goddess." + myparam);
  },
  showWarning: function () {
    console.log("Space junk falls into Earth's atmosphere at a rate of about one a day.");
  }
};

// To access a value in an array, use the name of the object, the key and the index.
// Logs "Mars" using dot notation
console.log(planet.neighboringPlanets[0]);

// Logs "Mars" using bracket notation
console.log(planet["neighboringPlanets"][0]);

// To call a method, use the name of the object and the key. Don't forget the ()!
planet.tellFunFact(" troll");
planet.showWarning();

// The default keyword "this" refers to the global object
// In a browser, the global object is the Window 

// Logs Window
console.log(this);

// When the keyword "this" is used inside of an object like planet, "this" belongs to that object
var planet = {
  name: "Earth",
  age: "4.543 billion years",
  isPopulated: true,
  population: "7.594 billion",
  logFacts: function () {
     //Logs "This planet's name is Earth"
     console.log("This planet's name is " + this.name);
     //Logs "This planet's age is 4.543 billion years"
	 console.log("This planet's age is " + this.age);
  },
  logPopulation: function () {
    if (this.isPopulated) {
      // Logs "This planet's population is 7.594 billion"
	  console.log("This planet's population is " + this.population);
	} else {
	  console.log("The planet is unpopulated");
	}   
  }
};

// Calls object methods
planet.logFacts();
planet.logPopulation();